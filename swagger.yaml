openapi: 3.0.0
info:
  title: Jahidul Arafat's NextJS/ReactJS E-commerce Template APIs
  version: 1.0.0
  description: "API for managing products and user shopping carts in an e-commerce application, designed by Jahidul Arafat, 
  URL https://www.linkedin.com/in/jahidul-arafat-presidential-fellow-phd-student-791a7490/"

servers:
  - url: http://localhost:3000/api

paths:
  /api-docs:
    get:
      summary: API Documentation
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: Successful response
        '401':
          description: Unauthorized
  /products:
    get:
      summary: Get all products or a specific product
      parameters:
        - in: query
          name: id
          schema:
            type: string
          description: ID of the product to retrieve (optional)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Product'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal Server Error

    post:
      summary: Add new product(s)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Product'
                - type: array
                  items:
                    $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product(s) added successfully
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a product
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to delete
      responses:
        '200':
          description: Product deleted successfully
        '400':
          description: Product ID is required
        '404':
          description: Product not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a product
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Product ID is required
        '404':
          description: Product not found
        '500':
          description: Internal Server Error

  /user/{userId}/cart:
    get:
      summary: Get user's cart
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: User not found
        '500':
          description: Server error

    post:
      summary: Add product(s) to cart
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SingleProductAdd'
                - $ref: '#/components/schemas/MultipleProductAdd'
      responses:
        '201':
          description: Products added successfully
        '207':
          description: Some products were not found
        '400':
          description: Invalid input
        '500':
          description: Server error

    delete:
      summary: Remove product(s) from cart
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SingleProductRemove'
                - $ref: '#/components/schemas/MultipleProductRemove'
      responses:
        '200':
          description: Products removed successfully
        '207':
          description: Some products were not found in the cart
        '400':
          description: Invalid input
        '404':
          description: User not found
        '500':
          description: Server error

  /user/{userId}/order:
    post:
      summary: Create a new order for a user
      tags:
        - Orders
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the user placing the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order saved successfully
        '400':
          description: Bad request
    get:
      summary: Get all orders for a user
      tags:
        - Orders
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the user to fetch orders for
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

    delete:
      summary: Delete an order for a user
      tags:
        - Orders
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: The ID of the user
        - in: query
          name: transactionId
          required: true
          schema:
            type: string
          description: The transaction ID of the order to delete
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order deleted successfully
        '400':
          description: Bad request (missing transactionId)
        '404':
          description: Order not found or no orders for user

components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - imageUrl
        - description
        - price
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
        description:
          type: string
        price:
          type: number

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
        description:
          type: string
        price:
          type: number

    SingleProductAdd:
      type: object
      properties:
        productId:
          type: string

    MultipleProductAdd:
      type: object
      properties:
        productIds:
          type: array
          items:
            type: string

    SingleProductRemove:
      type: object
      properties:
        productId:
          type: string

    MultipleProductRemove:
      type: object
      properties:
        productIds:
          type: array
          items:
            type: string

    Order:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user who placed the order
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                description: ID of the product
              quantity:
                type: integer
                description: Quantity of the product
        transactionId:
          type: string
          description: Unique identifier for the transaction
        totalCost:
          type: number
          description: Total amount of the order
        paymentMethod:
          type: string
          description: Method of payment (e.g., 'credit', 'debit', 'paypal')
        dateReceived:
          type: string
          format: date-time
          description: Timestamp of when the order was received
      required:
        - userId
        - items
        - transactionId
        - totalCost
        - paymentMethod
        - dateReceived